@startuml
hide circle
skinparam classAttributeIconSize 0

'Clases
Interface Opcion{
    +{abstract}calificar(): int
    +{abstract}esCorrecta(): boolean
}

Abstract Class Pregunta{
    -enunciado: String
    +{abstract}{static}Pregunta(enunciado: String)
    +asignarOpcionCorrecta(opcionCorrecta: String): void
    +esCorrecta(Opcion: String): boolean
    +calificar(Respuestaes: List<Respuesta>): void
}

Class PreguntaVoFClasico{
   +{static}PreguntaVoFClasico(enunciado: String)
}

Class PreguntaVoFPenalizado{
   +{static}PreguntaVoFPenalizado(enunciado: String)
}

Class Respuesta{
    -opcionElegida: String
    +{static}Respuesta(jugador: Jugador, opcionElegida: String)
    +calificar(opciones: HashMap<String, Opcion>): void
}

Class Jugador{
    -nombre: String
    -puntos: int
    +{Static}Jugador(nombre: String)
    +modificarPuntaje(numero:int): void
    +obtenerPuntaje(): int
}

Abstract Class Puntaje{
    -valor: int
    +setValor(valor: int): void
    +{abstract}agregar(puntaje: Puntaje): void
    +{abstract}sumar(puntaje: Puntaje): Puntaje
}

Class Puntos{
    +agregar(puntaje: Puntaje): void
    +sumar(puntaje: Puntaje): Puntaje
}

Class PuntoNulo{
    +agregar(puntaje: Puntaje): void
    +sumar(puntaje: Puntaje): Puntaje
}

Class PuntoNegativo{
    +agregar(puntaje: Puntaje): void
    +sumar(puntaje: Puntaje): Puntaje
}

Class PuntoPositivo{
    +agregar(puntaje: Puntaje): void
    +sumar(puntaje: Puntaje): Puntaje
}

Interface Calificador{
    +calificar(opcionesCorrectas: Opciones, opcionesElegidas: Opciones)
}

Class CalificadorConOrden{
    +calificar(opcionesCorrectas: Opciones, opcionesElegidas: Opciones)
}

Class CalificadorSinOrden{
    +calificar(opcionesCorrectas: Opciones, opcionesElegidas: Opciones)
}

Abstract Class CalificadorDecorator{
    +{Static}CalificadorDecorator(calificador: Calificador)
    +calificar(opcionesCorrectas: Opciones, opcionesElegidas: Opciones)
    +aplicarPenalizacion(): void
}

Class ClasicoDecorator{
    +{Static}ClasicoDecorator(calificador: Calificador)
    +calificar(opcionesCorrectas: Opciones, opcionesElegidas: Opciones)
    +aplicarPenalizacion(): void
}

Class PenalizadoDecorator{
    +{Static}ClasicoDecorator(calificador: Calificador)
    +calificar(opcionesCorrectas: Opciones, opcionesElegidas: Opciones)
    +aplicarPenalizacion(): void
}

Class ParcialDecorator{
    +{Static}ClasicoDecorator(calificador: Calificador)
    +calificar(opcionesCorrectas: Opciones, opcionesElegidas: Opciones)
    +aplicarPenalizacion(): void
}

'Relaciones
PreguntaVoFPenalizado --|> Pregunta
PreguntaVoFClasico --|> Pregunta
Respuesta o-- Jugador
Pregunta "1" *-left- "*" Opcion
Respuesta .up.> Opcion
PuntoNegativo -up-|> Puntaje
PuntoNulo -up-|> Puntaje
PuntoPositivo -up-|> Puntaje
Puntos --|> Puntaje
Puntos o-right- Puntaje
Jugador *-- Puntaje
Pregunta o-right- Calificador
CalificadorDecorator -left-|> Calificador
CalificadorDecorator o-left- Calificador
CalificadorSinOrden -up-|> Calificador
CalificadorConOrden -up-|> Calificador
ClasicoDecorator --|> CalificadorDecorator
PenalizadoDecorator --|> CalificadorDecorator
ParcialDecorator --|> CalificadorDecorator

@enduml