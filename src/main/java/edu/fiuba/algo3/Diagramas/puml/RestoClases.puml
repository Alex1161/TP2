@startuml
hide circle
skinparam classAttributeIconSize 0

'Clases
Class Opciones{
    -opciones: Collection<String>
    +agregarOpcion(opcion: String): void
    +obtenerOpciones(): Collection<String>
    +compararConOrden(opciones: Opciones): boolean
    +compararSinOrden(opciones: Opciones): boolean
    +esta(opcion: String): boolean
}

Abstract Class Pregunta{
    -enunciado: String
    -calificador: Calificador
    -comodines: Collection<Comodin>

    +{abstract}{static}Pregunta(enunciado: String)
    +setPenalidad(unaPenalidad : Penalidad): void
    +asignarOpcionesCorrectas(opcionesCorrectas: Opciones): void
    +asignarOpcionesPosibles(opcionesPosibles: Opciones): void
    +sonCorrectas(opciones: Opciones): boolean
    +calificar(Respuestas: List<Respuesta>): void
    +agregarComodin(unComodin: Comodin, respuesta: Respuesta): void
}

Interface Penalidad{
{method} +agregarComodin(multiplicador: Multiplicador, respuesta: Respuesta);
}

Class Respuesta{
    -opcionesElegidas: Opciones
    -puntajeObtenido: Puntaje
    -multiplicador: Multiplicador
    +{static}Respuesta(jugador: Jugador)
    +{static}Respuesta(jugador: Jugador, multiplicador: Multiplicador)
    +agregarOpcion(opcion: String): void
    +agregarPuntajeObtenido(puntaje:Puntaje):void
    +aplicarPuntaje(): void
    +cambiarMultiplicador(multiplicador: Multiplicador): void
}

Class Jugador{
    -nombre: String
    +{Static}Jugador(nombre: String)
    +modificarPuntaje(puntaje: puntaje): void
    +obtenerPuntaje(): int
}

Class Multiplicador{
    -factor: int
    -puntaje: Puntaje
    +{static}Multiplicador(factor: int)
    +aplicar(puntaje: Puntaje ): Puntaje
}

'Relaciones
Respuesta o-- Jugador
Pregunta "1" *-left- "2" Opciones
Respuesta *-up- Opciones
Jugador "1" *-left- "2" Multiplicador
Pregunta "0" *-right- "1" Penalidad

@enduml